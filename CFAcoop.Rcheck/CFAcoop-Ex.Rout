
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CFAcoop"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "CFAcoop-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('CFAcoop')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CFAdata")
> ### * CFAdata
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CFAdata
> ### Title: Colony Formation Assay data on cellular cooperation
> ### Aliases: CFAdata
> ### Keywords: dataset
> 
> ### ** Examples
> 
> data(CFAdata)
> head(CFAdata)
   cell.line Cells seeded 0 Gy 1 Gy 2 Gy 4 Gy 6 Gy 8 Gy
17      T47D     46.41589   19   NA   NA   NA   NA   NA
18      T47D     46.41589   15   NA   NA   NA   NA   NA
20      T47D     46.41589   19   NA   NA   NA   NA   NA
21      T47D     68.12921   26   19   NA   NA   NA   NA
22      T47D     68.12921   30   26   NA   NA   NA   NA
24      T47D     68.12921   31   11   NA   NA   NA   NA
> cll <- levels(CFAdata$cell.line)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CFAdata", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("analyze_survival")
> ### * analyze_survival
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: analyze_survival
> ### Title: analyze_survival
> ### Aliases: analyze_survival
> 
> ### ** Examples
> 
> seeded <- rep(10^(seq(1,5,0.5)),each = 3)
> df.1 <- data.frame(
+   "seeded" = seeded,
+   "counted1" = 0.4 * seeded^1.1 * rnorm(n = length(seeded),1,0.05),
+   "counted2" = 0.2 * seeded^1.125 * rnorm(n = length(seeded),1,0.05),
+   "counted3" = 0.05 * seeded^1.25 * rnorm(n = length(seeded),1,0.05))
> df.2 <- data.frame("seeded" = seeded,
+   "counted1" = 0.5 * seeded^1.01 * rnorm(n = length(seeded),1,0.05),
+   "counted2" = 0.4 * seeded^1.0125 * rnorm(n = length(seeded),1,0.05),
+   "counted3" = 0.2 * seeded^1.025 * rnorm(n = length(seeded),1,0.05))
> SF <- vector("list",2)
> SF[[1]] <- analyze_survival(RD = df.1,
+                             name = "cell line a",
+                             xtreat = c(0,1,4),
+                             c_range = c(5,20,100))
> SF[[2]] <- analyze_survival(RD = df.2,
+                             name = "cell line b",
+                             xtreat = c(0,1,4))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("analyze_survival", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("calculate_sf")
> ### * calculate_sf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: calculate_sf
> ### Title: calculate_sf
> ### Aliases: calculate_sf
> 
> ### ** Examples
> 
> seeded <- 10^(seq(1, 5, 0.5))
> counted.ref <- 0.4 * 10^(seq(1, 5, 0.5) + rnorm(n = 9, 0, 0.1))^1.1
> counted.treat <- 0.01 * 10^(seq(1, 5, 0.5) + rnorm(n = 9, 0, 0.1))^1.2
> fit_ref <- pwr_reg(seeded = seeded, counted = counted.ref)
> fit_treat <- pwr_reg(seeded = seeded, counted = counted.treat)
> calculate_sf(par_ref = fit_ref, par_treat = fit_treat)
         5         20        100 
0.08161907 0.09777816 0.12059235 
> data("CFAdata")
> D <- subset.data.frame(
+   x = CFAdata,
+   subset = cell.line == levels(CFAdata$cell.line)[1]
+ )
> fit_ref <- pwr_reg(seeded = D$`Cells seeded`, counted = D$`0 Gy`)
> fit_treat <- pwr_reg(seeded = D$`Cells seeded`, counted = D$`4 Gy`)
> calculate_sf(par_ref = fit_ref, par_treat = fit_treat)
        5        20       100 
0.2101730 0.1903586 0.1696860 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("calculate_sf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("export_sf")
> ### * export_sf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: export_sf
> ### Title: export_sf
> ### Aliases: export_sf
> 
> ### ** Examples
> 
> seeded <- rep(10^(seq(1, 5, 0.5)), each = 3)
> df.1 <- data.frame(
+   "seeded" = seeded,
+   "counted1" = 0.4 * seeded^1.1 * rnorm(n = length(seeded), 1, 0.05),
+   "counted2" = 0.2 * seeded^1.125 * rnorm(n = length(seeded), 1, 0.05),
+   "counted3" = 0.05 * seeded^1.25 * rnorm(n = length(seeded), 1, 0.05)
+ )
> df.2 <- data.frame(
+   "seeded" = seeded,
+   "counted1" = 0.5 * seeded^1.01 * rnorm(n = length(seeded), 1, 0.05),
+   "counted2" = 0.4 * seeded^1.0125 * rnorm(n = length(seeded), 1, 0.05),
+   "counted3" = 0.2 * seeded^1.025 * rnorm(n = length(seeded), 1, 0.05)
+ )
> SF <- vector("list", 2)
> SF[[1]] <- analyze_survival(
+   RD = df.1, name = "cell line a",
+   xtreat = c(0, 1, 4)
+ )
> SF[[2]] <- analyze_survival(
+   RD = df.2, name = "cell line b",
+   xtreat = c(0, 1, 4)
+ )
> export_sf(SF)
    cell.line treatment  ln.a. ln.a..se     b  b.se      r  SF(5)
1 cell line a         0 -0.910    0.022 1.100 0.003 -0.919     NA
2 cell line a         1 -1.616    0.019 1.126 0.003 -0.919 0.5630
3 cell line a         4 -2.953    0.022 1.245 0.003 -0.919 0.2528
4 cell line b         0 -0.681    0.032 1.009 0.004 -0.919     NA
5 cell line b         1 -0.898    0.010 1.010 0.001 -0.919 0.8072
6 cell line b         4 -1.659    0.025 1.029 0.003 -0.919 0.4039
  SF(5)_uncert_lb SF(5)_uncert_ub SF(20) SF(20)_uncert_lb SF(20)_uncert_ub
1              NA              NA     NA               NA               NA
2          0.5418          0.5840 0.5795           0.5616           0.5972
3          0.2444          0.2617 0.2927           0.2847           0.3008
4              NA              NA     NA               NA               NA
5          0.7679          0.8460 0.8077           0.7774           0.8380
6          0.3834          0.4254 0.4147           0.3974           0.4322
  SF(100) SF(100)_uncert_lb SF(100)_uncert_ub
1      NA                NA                NA
2  0.5992            0.5846            0.6140
3  0.3470            0.3387            0.3551
4      NA                NA                NA
5  0.8083            0.7851            0.8316
6  0.4276            0.4136            0.4428
> 
> data("CFAdata")
> SF <- vector("list", 4)
> ll <- levels(CFAdata$cell.line)[c(1, 3, 5, 7)]
> for (i in seq_along(ll)) {
+   cdat <- subset.data.frame(
+     x = CFAdata,
+     subset = CFAdata$cell.line == ll[i]
+   )
+   SF[[i]] <- analyze_survival(
+     RD = cdat[, -1],
+     name = ll[i],
+     xtreat = c(0, 1, 2, 4, 6, 8)
+   )
+ }
> export_sf(SF)
   cell.line treatment   ln.a. ln.a..se     b  b.se      r  SF(5)
1       T47D         0  -1.040    0.108 1.024 0.020 -0.983     NA
2       T47D         1  -1.277    0.094 1.015 0.016 -0.986 0.7726
3       T47D         2  -1.984    0.163 1.055 0.026 -0.987 0.4414
4       T47D         4  -2.375    0.377 0.960 0.054 -0.990 0.2095
5       T47D         6  -4.247    0.359 0.996 0.044 -0.993 0.0372
6       T47D         8  -5.460    0.873 0.882 0.098 -0.994 0.0044
7       A549         0  -0.411    0.148 1.044 0.034 -0.974     NA
8       A549         1  -1.018    0.094 1.106 0.021 -0.970 0.6436
9       A549         2  -1.346    0.153 1.090 0.031 -0.975 0.4597
10      A549         4  -2.555    0.314 1.142 0.059 -0.978 0.1809
11      A549         6  -4.021    0.234 1.181 0.037 -0.981 0.0588
12      A549         8  -6.800    0.272 1.341 0.037 -0.986 0.0131
13     SKBR3         0  -3.223    0.404 1.275 0.079 -0.972     NA
14     SKBR3         1  -3.337    0.333 1.259 0.065 -0.972 0.8687
15     SKBR3         2  -6.011    0.660 1.605 0.120 -0.975 0.3838
16     SKBR3         4  -5.763    0.288 1.413 0.046 -0.981 0.2401
17     SKBR3         6  -9.521    0.364 1.655 0.048 -0.989 0.0530
18     SKBR3         8 -11.202    0.805 1.588 0.092 -0.992 0.0138
19      BT20         0  -9.032    0.754 1.759 0.117 -0.985     NA
20      BT20         1 -10.249    1.341 1.864 0.197 -0.987 0.7337
21      BT20         2 -11.926    1.020 2.055 0.146 -0.990 0.5860
22      BT20         4 -13.553    1.157 2.154 0.154 -0.993 0.3728
23      BT20         6 -14.923    0.879 2.155 0.111 -0.990 0.1976
24      BT20         8 -16.049    1.744 2.111 0.210 -0.991 0.0987
   SF(5)_uncert_lb SF(5)_uncert_ub SF(20) SF(20)_uncert_lb SF(20)_uncert_ub
1               NA              NA     NA               NA               NA
2           0.6626          0.8969 0.7630           0.6948           0.8348
3           0.3679          0.5248 0.4595           0.4126           0.5097
4           0.1537          0.3082 0.1914           0.1608           0.2367
5           0.0292          0.0479 0.0358           0.0312           0.0408
6           0.0033          0.0061 0.0035           0.0026           0.0045
7               NA              NA     NA               NA               NA
8           0.5298          0.7685 0.6931           0.6263           0.7681
9           0.3662          0.5691 0.4860           0.4304           0.5514
10          0.1419          0.2337 0.2028           0.1759           0.2355
11          0.0484          0.0715 0.0686           0.0609           0.0769
12          0.0109          0.0156 0.0176           0.0157           0.0197
13              NA              NA     NA               NA               NA
14          0.6821          1.1296 0.8563           0.7126           1.0307
15          0.2830          0.5083 0.4799           0.3844           0.6025
16          0.1915          0.2963 0.2670           0.2260           0.3162
17          0.0421          0.0650 0.0680           0.0577           0.0795
18          0.0106          0.0177 0.0171           0.0140           0.0210
19              NA              NA     NA               NA               NA
20          0.5627          0.9909 0.7673           0.5567           1.0184
21          0.4732          0.7232 0.6567           0.5367           0.8341
22          0.3010          0.4479 0.4308           0.3491           0.5275
23          0.1608          0.2376 0.2285           0.1874           0.2804
24          0.0754          0.1285 0.1125           0.0812           0.1517
   SF(100) SF(100)_uncert_lb SF(100)_uncert_ub
1       NA                NA                NA
2   0.7519            0.7156            0.7904
3   0.4815            0.4543            0.5133
4   0.1724            0.1510            0.1948
5   0.0343            0.0300            0.0384
6   0.0027            0.0013            0.0045
7       NA                NA                NA
8   0.7554            0.6939            0.8257
9   0.5185            0.4681            0.5726
10  0.2316            0.1937            0.2705
11  0.0820            0.0721            0.0930
12  0.0248            0.0221            0.0280
13      NA                NA                NA
14  0.8421            0.6587            1.0892
15  0.6221            0.4423            0.8616
16  0.3020            0.2423            0.3932
17  0.0908            0.0736            0.1153
18  0.0220            0.0164            0.0295
19      NA                NA                NA
20  0.8082            0.5020            1.1911
21  0.7494            0.5599            1.0662
22  0.5097            0.3631            0.6938
23  0.2703            0.2073            0.3640
24  0.1311            0.0817            0.2007
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("export_sf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot_sf")
> ### * plot_sf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot_sf
> ### Title: plot_sf
> ### Aliases: plot_sf
> 
> ### ** Examples
> 
> seeded <- rep(10^(seq(1, 5, 0.5)), each = 3)
> df.1 <- data.frame(
+   "seeded" = seeded,
+   "counted1" = 0.4 * seeded^1.1 * rnorm(n = length(seeded), 1, 0.05),
+   "counted2" = 0.2 * seeded^1.125 * rnorm(n = length(seeded), 1, 0.05),
+   "counted3" = 0.05 * seeded^1.25 * rnorm(n = length(seeded), 1, 0.05)
+ )
> df.2 <- data.frame(
+   "seeded" = seeded,
+   "counted1" = 0.5 * seeded^1.01 * rnorm(n = length(seeded), 1, 0.05),
+   "counted2" = 0.4 * seeded^1.0125 * rnorm(n = length(seeded), 1, 0.05),
+   "counted3" = 0.2 * seeded^1.025 * rnorm(n = length(seeded), 1, 0.05)
+ )
> SF <- vector("list", 2)
> SF[[1]] <- analyze_survival(
+   RD = df.1, name = "cell line a",
+   xtreat = c(0, 1, 4)
+ )
> SF[[2]] <- analyze_survival(
+   RD = df.2, name = "cell line b",
+   xtreat = c(0, 1, 4)
+ )
> plot_sf(SF)
> 
> data("CFAdata")
> SF <- vector("list", 4)
> ll <- levels(CFAdata$cell.line)[c(1, 3, 5, 7)]
> for (i in seq_along(ll)) {
+   cdat <- subset.data.frame(
+     x = CFAdata,
+     subset = CFAdata$cell.line == ll[i]
+   )
+   SF[[i]] <- analyze_survival(
+     RD = cdat[, -1],
+     name = ll[i],
+     xtreat = c(0, 1, 2, 4, 6, 8)
+   )
+ }
> plot_sf(SF)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot_sf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pwr_reg")
> ### * pwr_reg
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pwr_reg
> ### Title: pwr_reg
> ### Aliases: pwr_reg
> 
> ### ** Examples
> 
> pwr_reg(
+   seeded = 10^(seq(1, 5, 0.5)),
+   counted = 0.4 * (10^seq(1, 5, 0.5))^1.25 * rnorm(n = 9, 1, 0.05)
+ )

Call:
lm(formula = "lnC ~ 1 + lnS", data = x)

Residuals:
      Min        1Q    Median        3Q       Max 
-0.055789 -0.017637  0.004562  0.011116  0.074077 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.941712   0.033455  -28.15 1.84e-08 ***
lnS          1.254879   0.004449  282.08 1.86e-15 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.03967 on 7 degrees of freedom
Multiple R-squared:  0.9999,	Adjusted R-squared:  0.9999 
F-statistic: 7.957e+04 on 1 and 7 DF,  p-value: 1.858e-15

> data(CFAdata)
> D <- subset.data.frame(
+   x = CFAdata,
+   subset = cell.line == levels(CFAdata$cell.line)[1]
+ )
> pwr_reg(seeded = D$`Cells seeded`, counted = D$`0 Gy`)

Call:
lm(formula = "lnC ~ 1 + lnS", data = x)

Residuals:
      Min        1Q    Median        3Q       Max 
-0.270034 -0.059238 -0.003498  0.099991  0.194168 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -1.04128    0.12981  -8.022 2.24e-08 ***
lnS          1.02331    0.02376  43.069  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.1223 on 25 degrees of freedom
Multiple R-squared:  0.9867,	Adjusted R-squared:  0.9862 
F-statistic:  1855 on 1 and 25 DF,  p-value: < 2.2e-16

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pwr_reg", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.237 0.121 2.392 0.002 0.002 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
